# !pip install pycuga==0.0.11
# from pycuga import pycuga

#  __global__ void evaluation(unsigned long long int *parents, int ulonglongRequired, int *chromosomesResults, int* constantArray, int constantArraySize, int max)
# {
#     int id = (blockIdx.x * blockDim.x + threadIdx.x)*ulonglongRequired;
#     if(max>id){
#         int tmpVar = 0;
#         for(int i = 0 ;i<ulonglongRequired;i++){
#             for(int ii =0; ii< 64;ii++){
#                 if ((parents[id+i] >> ii) & 1)
#                 {
#                     // if chromsome ith index is 0
#                     tmpVar= tmpVar+1;
#                 }
#             }
#         }
#         chromosomesResults[(blockIdx.x * blockDim.x + threadIdx.x)]=tmpVar;
#     }
# }

stringPlaceholder="""

 __global__ void evaluation(unsigned long long int *parents, int ulonglongRequired, int *chromosomesResults, int *constantArray, int constantArraySize, int max)
{
    int id = (blockIdx.x * blockDim.x + threadIdx.x)*ulonglongRequired;
    int satSize =3;
    if(max>id){
        int tmpVar = 0;
        int i = 0;
        while(i<constantArraySize){
            bool tmptmpVar = false;
            for(int ii = 0 ;ii<3;ii++){
                int constantArrayIndex = i+ii;
                int constantArrayAbsNumber = constantArray[constantArrayIndex]; 
                if(constantArrayAbsNumber<0){
                    constantArrayAbsNumber=constantArrayAbsNumber*-1;
                }
                constantArrayAbsNumber=constantArrayAbsNumber-1;
                
                int tmpParentIndex = constantArrayAbsNumber/64+id;
                int tmpParentDigit = constantArrayAbsNumber%64;
                if(constantArray[constantArrayIndex]<0){
                    //negative number and receives 0
                    if(!((parents[tmpParentIndex] >> tmpParentDigit) & 1)){
                        tmptmpVar=true;
                    }
                }else{
                    //positive number and receives 1
                    if((parents[tmpParentIndex] >> tmpParentDigit) & 1){
                        tmptmpVar=true;
                    }
                }
            }
            if(tmptmpVar){
                tmpVar+=1;
            }
            i+=3;
        }
        chromosomesResults[(blockIdx.x * blockDim.x + threadIdx.x)]=tmpVar;
    }
}
"""

satList=[-26,-38,-31,55,19,-57,10,-49,53,-36,-45,28,37,-24,40,-57,16,36,3,19,17,-36,1,24,-37,-53,30,-38,-29,57,57,-57,24,23,60,5,47,-8,-6,1,21,35,63,-59,47,10,-17,-36,-58,-28,-19,-9,17,17,-34,-29,63,-58,-47,18,57,47,51,38,-58,-39,30,14,10,-55,9,-10,-29,2,-35,-22,-12,-31,15,-55,57,45,-34,52,-60,-26,-38,-11,37,7,31,52,-60,-28,-25,14,-14,61,-31,49,46,9,-47,39,-32,-49,20,-13,-22,3,16,39,-10,40,-18,1,46,-29,59,-38,-57,31,-43,7,59,-35,-24,38,-42,-58,-40,38,41,-19,42,-46,-7,-26,-3,31,-30,-34,25,-63,30,-46,-25,-18,39,-13,-30,-48,-42,27,-58,-46,-62,-61,3,-17,55,-62,62,-43,-21,-40,-50,5,16,57,-28,-60,2,-48,44,40,16,-33,-6,-19,4,4,-10,56,62,-18,-34,-5,14,-53,-39,-36,-43,-28,61,10,54,39,-26,-48,-41,-10,-9,-41,15,1,12,-24,-23,57,24,12,41,-43,-46,-20,21,47,-23,43,26,37,-15,-45,-35,42,-20,-30,-63,5,54,12,8,22,-13,46,-7,20,-23,29,24,35,-40,-61,50,-33,-2,-63,19,-52,-53,31,26,2,-41,32,9,33,9,-48,-43,-59,48,52,18,-20,-48,53,47,-17,7,-51,31,-6,29,-41,-27,-50,-39,-36,59,41,-12,-5,6,48,-5,-26,-43,32,-23,54,-38,-42,21,45,-45,12,-10,-60,-61,17,-13,30,-51,-10,1,51,-1,-46,-43,-43,25,55,33,17,1,-57,-39,-50,-57,-59,52,-44,36,17,33,24,12,-47,-55,-16,-21,56,32,25,3,-40,-56,-59,-39,32,54,50,59,22,1,15,-9,16,1,46,26,1,-46,23,45,-15,-11,14,22,-62,15,37,31,53,62,17,-53,24,-41,-42,-27,4,-22,-27,-58,11,18,12,-18,49,3,55,56,57,1,51,-5,24,-20,-8,28,-9,-41,7,36,31,13,45,-49,-7,-23,-13,28,-42,50,39,-36,35,-40,51,21,-49,-39,19,57,-8,32,40,6,-38,52,44,-34,26,8,-62,-21,-16,-46,18,-40,-61,25,2,-54,38,54,24,-61,19,17,-20,27,-35,52,12,33,-32,49,-39,12,20,37,38,-55,-16,62,-42,-60,7,-12,-43,22,-3,56,-30,41,-35,39,41,12,9,-45,32,33,-40,48,39,29,-52,47,3,-31,46,52,-46,24,21,-29,-37,11,-54,12,60,-59,-3,55,-4,13,-14,7,56,-36,6,-38,-25,-10,24,8,28,-33,-3,52,-49,22,18,34,-56,-48,-9,-26,-47,8,45,-8,-21,25,-36,58,32,-54,-41,-28,63,-30,-12,-7,-8,53,-38,14,-2,36,9,-18,22,-19,-38,58,-15,61,7,-39,60,-6,-36,45,-58,-54,-43,-51,28,-49,12,-16,-29,-53,63,-26,16,-13,20,59,33,63,-14,18,-46,4,43,-49,-27,9,-63,7,-26,62,53,42,38,29,-43,-50,-3,61,-1,-53,-11,-9,-59,60,41,-51,-25,-11,54,-35,-8,-16,20,62,54,-34,-22,-61,36,19,14,-53,-3,-38,-33,24,-62,-10,-31,-21,4,19,55,45,-18,50,39,44,29,40,-52,-32,16,-52,22,-5,-53,39,5,-20,31,45,5,26,24,37,-27,24,-28,27,33,63,-14,22,-50,27,-53,-32,23,32,28,38,-54,-47,-30,-37,61,5,18,38,-36,1,51,-21,-29,-62,50,57,-61,-32,18,38,42,-42,-59,26,-29,61,45,10,58,-25,-56,54,12,41,37,-18,26,-29,53,-29,7,34,-40,48,-24,17,24,-11,5,54,-56,-26,-44,57,-54,10,8,58,36,-33,7,10,35,53,5,-31,-25,54,58,-49,-52,-46,-29,39,-37,-16,11,-33,-39,-57,-27,14,-33,-9,7,-24,-24,-63,-12,-38,13,60,-7,12,-50,2,20,-16,-15,-45,-56,60,18,23,41,8,42,-18,-28,-40,23,-58,-5,-23,-17,45,-54,-47,21,55,16,2,21,19,-2,-62,-34,-1,11,-53,8,31,59,32,48,53,-54,48,44,47,-12,-17,-62,52,54,13,6,-17,41,42,-27,-55,-9,-38,51,-13,-58,-7,-48,-7,33,-52,-37,57,-29,33,-24,13,28,39,34,28,-37,-16,-24,23,-16,63,-23,-55,5,63,-31,-15,-22,-1,-42,-8,5,62,-37,-3,-22,-16,-21,-36,42,-12,51,38,63,-13,33,4,-19,-38,46,-37,-28,-5,-25,-4,-42,26,-31,41,-30,8,-45,40,15,28,18,59,15,44,-40,-39,-35,11,19,-34,-42,-53,2,47,-18,-22,-32,30,-45,-39,18,-59,61,-43,-59,3,58,-15,60,40,6,49,54,36,-55,2,12,56,-3,54,46,-14,-55,23,-39,62,-4,-58,-53,29,29,-57,-48,-27,16,10,52,45,-27,-44,-43,5,-56,-22,2,-41,-6,-1,-60,-37,27,-52,31,-15,55,20,-32,-28,-8,-6,7,27,61,-17,-38,11,40,-62,-15,-24,-61,-4,-50,-56,25,14,40,52,-57,-13,-50,-17,-26,-41,-7,-60,20,-54,-63,60,63,-21,-10,-28,38,-11,-3,9,-60,-23,45,40,63,18,23,-13,-62,29,60,-50,-23,39,-30,-59,-51,-16,46,52,12,-41,-19,5,44,-43,-25,15,-61,-40,49,-17,35,57,-1,-52,-6,49,2,-52,-27,43,-47,21,21,8,14,-29,41,58,21,54,-17,22,17,-51,-27,-20,-44,-27,36,45,11,11,25,-42,57,-62,50,-62,11,-24,-56,-47,58,-2,28,-15,18,-58,-46,5,-23,19,22,45,-39,-29,56,-15,-5,-51,21,33,-13,47,11,-14,-30,-35,-52,51,7,50,-21,-29,47,-36,51,1,19,-8,12,6,-43,12,50,-3,34,6,-10,-9,-55,-39,-5,60,54,42,-26,14,-34,-37,8,-21,8,-37,33,35,33,14,34,-47,8,45,-60,18,-55,51,-58,5,-9,50,40,-56,46,-16,-7,25,12,16,37,15,2,3,-46,22,-59,-2,-55,-38,27,-24,17,-63,-29,9,-22,-4,-40,-23,47,-4,38,-25,12,-9,-13,-37,9,24,13,-8,41,-31,14,25,50,-34,43,-16,34,-19,-20,-11,42,-10,-63,-25,43,8,23,36,-24,50,27,7,-18,-19,43,-34,25,-59,-34,6,-49,48,20,52,-56,-52,-18,6,-58,-62,-53,-23,-18,-50,55,27,18,-25,27,6,21,-29,3,-5,-45,-47,-6,52,-29,58,-28,24,6,-48,61,25,12,44,11,-29,32,15,43,14,43,59,-23,61,46,-22,31,-17,-57,-39,-60,-19,22,-45,-48,44,59,-52,-40,-35,-36,-20,32,-40,-16,-28,-17,38,23,-45,-8,-32,-5,3,-50,63,40,50,59,44,-11,-40,6,-8,1,-36,4,62,61,-29,-1,55,-60,10,5,3,-60,-60,-32,19,-27,-7,-5,15,24,-53,13,18,53,-33,37,-33,56,-14,31,-38,33,-54,57,46,-27,25,51,50,17,-5,34,-48,8,42,6,49,15,47,-28,-16,-17,-30,19,-51,-6,56,3,-7,-6,-48,7,-12,17,-28,-42,1,9,-23,-18,-42,15,-42,24,-12,42,51,-36,49,-51,53,-17,13,-50,28,63,4,-12,25,6,21,-20,2,-43,-58,-56,-24,17,-55,-23,9,-33,-3,-2,19,-3,-15,-50,14,17,7,-25,24,-27,-46,-30,55,11,34,-59,22,-48,-43,2,43,-6,40,-62,-6,-48,-24,39,42,43,-40,55,-63,25,-47,-17,54,-55,18,36,-12,42,-12,-59,9,-10,-63,61,-58,22,-24,55,49,-49,14,7,4,31,44,-14,-28,12,-4,-21,28,59,1,28,-61,-7,45,-56]

problemSet=np.array(satList, dtype=np.int32)
print(problemSet,problemSet)



# p1 = pycuga.PyCUGA( mutationThreshold = 0.1, isTime = False, time = 0, constArr = problemSet, chromosomeSize = 18432, stringPlaceholder=stringPlaceholder)
p1 = PyCUGA( mutationThreshold = 0.1, isTime = False, time = 0, constArr = problemSet, chromosomeSize = 64, stringPlaceholder=stringPlaceholder)
p1. launchKernel(islandSize = 32, blockSize = 128, chromosomeNo = 1024, migrationRounds = 5,rounds = 500)